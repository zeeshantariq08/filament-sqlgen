<?php

namespace ZeeshanTariq\FilamentSqlGen\Filament\Widgets;

use Filament\Widgets\Widget;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class SqlGenWidget extends Widget
{
    protected static string $view = 'filament-sqlgen::widgets.sql-gen-widget';

    public ?string $question = '';
    public ?string $answer = '';

    public function ask()
    {
        $sqlQuery = $this->askGeminiService($this->question);
        $this->answer = $this->handleDynamicQuery($sqlQuery);
    }

    /**
     * Send the user question to the Gemini service and retrieve SQL.
     */
    protected function askGeminiService(string $question): string
    {
        try {

            $apiKey = config('filament-sqlgen.gemini_api_key');

            // Get the endpoint from the configuration
            $endpoint = config('filament-sqlgen.gemini_api_endpoint');

            // Append the API key to the endpoint URL
            $endpointWithKey = "{$endpoint}?key={$apiKey}";

            // Make the request to the Gemini API with the API key in the Authorization header
            // Send the request to Gemini API with the endpoint and the question
            $response = Http::post($endpointWithKey, [
                'contents' => [
                    ['parts' => [['text' => $this->buildGeminiPrompt($question)]]]
                ]
            ]);

            return $this->parseSqlResponse($response);
        } catch (\Exception $e) {
            Log::error('Gemini API request failed', ['exception' => $e->getMessage()]);
            return "‚ùå Failed to connect to the Gemini service. Please try again later.";
        }
    }

    /**
     * Returns the Gemini endpoint from configuration or default.
     */
    protected function getGeminiEndpoint(): string
    {
        return config('filament-sqlgen.gemini_api_endpoint', 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent');
    }

    /**
     * Constructs the Gemini prompt for SQL generation.
     */
    protected function buildGeminiPrompt(string $question): string
    {
        return <<<EOT
You are an expert SQL assistant. Generate a single MySQL query only. Do not include markdown, comments, or explanation. Use lowercase Laravel-style column names like 'created_at', 'updated_at'. Example: SELECT COUNT(*) FROM users WHERE DATE(created_at) = CURDATE();

User Question: {$question}
EOT;
    }

    /**
     * Parse the response from Gemini and return the SQL query.
     */
    protected function parseSqlResponse($response): string
    {
        $data = $response->json();

        // Ensure valid response structure
        if (empty($data['candidates'][0]['content']['parts'][0]['text'])) {
            return "‚ùå No valid SQL query generated by Gemini. Please try again.";
        }

        $text = $data['candidates'][0]['content']['parts'][0]['text'];

        // Clean up any unwanted content like markdown or comments
        $text = preg_replace('/```(.*?)```/is', '$1', $text); // Clean markdown fences
        $text = preg_replace('/--.*$/m', '', $text); // Remove comments
        $text = preg_replace('/\/\*.*?\*\//s', '', $text); // Remove block comments

        preg_match('/^(.*?;)/s', trim($text), $matches);
        return isset($matches[1]) ? trim($matches[1]) : trim($text);
    }

    /**
     * Handles the SQL query and returns an HTML table if the query was successful.
     */
    protected function handleDynamicQuery(string $sqlQuery): string
    {
        if (empty($sqlQuery)) {
            return "‚ÑπÔ∏è I couldn't process your request at the moment. Please try again.";
        }

        // Basic validation for SELECT queries
        if (!preg_match('/^\s*select\s/i', $sqlQuery)) {
            return "ü§ñ I'm currently only able to answer questions about viewing information. Try rephrasing your request.";
        }

        try {
            $results = DB::select($sqlQuery);

            // Return formatted results or a message if no data is found
            return $this->formatResults($results);
        } catch (\Exception $e) {
            Log::error('SQL query execution failed', ['sql_query' => $sqlQuery, 'exception' => $e->getMessage()]);
            return "‚ùå There was an issue processing your request. Please try again later.";
        }
    }

    /**
     * Format the query results into an HTML table.
     */
    protected function formatResults(array $results): string
    {
        if (empty($results)) {
            return "‚ÑπÔ∏è No data found for your request.";
        }

        $html = "<div class='overflow-x-auto'><table class='table-auto w-full text-sm text-left text-gray-800 border border-gray-300 rounded'>";
        $html .= $this->generateTableHeader($results);
        $html .= $this->generateTableBody($results);
        $html .= "</table></div>";

        return $html;
    }

    /**
     * Generate the table header from the result's keys.
     */
    protected function generateTableHeader(array $results): string
    {
        $html = "<thead><tr class='bg-gray-100 font-semibold'>";
        foreach ((array)$results[0] as $key => $val) {
            $html .= "<th class='px-4 py-2 border'>" . e(ucwords(str_replace('_', ' ', $key))) . "</th>";
        }
        $html .= "</tr></thead>";
        return $html;
    }

    /**
     * Generate the table body from the result's rows.
     */
    protected function generateTableBody(array $results): string
    {
        $html = "<tbody>";
        foreach ($results as $row) {
            $html .= "<tr class='hover:bg-gray-50'>";
            foreach ((array)$row as $val) {
                $html .= "<td class='px-4 py-2 border'>" . e($val) . "</td>";
            }
            $html .= "</tr>";
        }
        $html .= "</tbody>";
        return $html;
    }
}
