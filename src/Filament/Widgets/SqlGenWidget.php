<?php

namespace ZeeshanTariq\FilamentSqlGen\Filament\Widgets;

use Filament\Widgets\Widget;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class SqlGenWidget extends Widget
{
    protected static string $view = 'filament-sqlgen::widgets.sql-gen-widget';

    public ?string $question = '';
    public ?string $answer = '';

    public function ask()
    {
        $sqlQuery = $this->askGeminiService($this->question);
        $this->answer = $this->handleDynamicQuery($sqlQuery);
    }

    protected function askGeminiService(string $question): string
    {
        try {
            $apiKey = config('filament-sqlgen.gemini_api_key');
            $endpoint = config('filament-sqlgen.gemini_api_endpoint');
            $endpointWithKey = "{$endpoint}?key={$apiKey}";

            $response = Http::post($endpointWithKey, [
                'contents' => [
                    ['parts' => [['text' => $this->buildGeminiPrompt($question)]]]
                ]
            ]);

            return $this->parseSqlResponse($response);
        } catch (\Exception $e) {
            Log::error('Gemini API request failed', ['exception' => $e->getMessage()]);
            return "‚ùå Failed to connect to the Gemini service. Please try again later.";
        }
    }

    protected function buildGeminiPrompt(string $question): string
    {
        $schema = $this->getDatabaseSchemaSummary();

        return <<<EOT
You are an expert SQL assistant for a Laravel MySQL application.

Use only the following tables and columns from the database:

{$schema}

Instructions:
- Only return a valid SELECT SQL query.
- Do NOT invent tables or columns.
- Do NOT include markdown or comments.
- Use lowercase column names in Laravel-style like 'created_at'.

User Question: {$question}
EOT;
    }

    protected function getDatabaseSchemaSummary(): string
    {
        $tables = DB::select('SHOW TABLES');
        $schema = [];

        foreach ($tables as $tableObj) {
            $tableName = array_values((array)$tableObj)[0];
            $columns = DB::select("SHOW COLUMNS FROM {$tableName}");
            $columnNames = array_map(fn($col) => $col->Field, $columns);
            $schema[] = "- {$tableName}(" . implode(', ', $columnNames) . ")";
        }

        return implode("\n", $schema);
    }

    protected function parseSqlResponse($response): string
    {
        $data = $response->json();

        if (empty($data['candidates'][0]['content']['parts'][0]['text'])) {
            return "‚ùå No valid SQL query generated by Gemini. Please try again.";
        }

        $text = $data['candidates'][0]['content']['parts'][0]['text'];
        $text = preg_replace('/```(.*?)```/is', '$1', $text);
        $text = preg_replace('/--.*$/m', '', $text);
        $text = preg_replace('/\/\*.*?\*\//s', '', $text);
        preg_match('/^(.*?;)/s', trim($text), $matches);

        return isset($matches[1]) ? trim($matches[1]) : trim($text);
    }

    protected function handleDynamicQuery(string $sqlQuery): string
    {

        if (empty($sqlQuery)) {
            return "‚ÑπÔ∏è I couldn't process your request at the moment. Please try again.";
        }

        // Clean unwanted prefixes like 'sql' and trim whitespace
        $cleanQuery = trim(preg_replace('/^sql\s*/i', '', $sqlQuery));

        // Ensure it starts with a SELECT statement
        if (!preg_match('/^\s*select\s/i', $cleanQuery)) {
            return "ü§ñ I'm only allowed to run SELECT queries for safety. Please rephrase your question to ask for information.";
        }

        try {
            $results = DB::select($cleanQuery);

            return $this->formatResults($results);
        } catch (\Exception $e) {
            Log::error('SQL query execution failed', [
                'sql_query' => $cleanQuery,
                'exception' => $e->getMessage(),
            ]);
            return "‚ùå There was an issue processing your request. Please try again later.";
        }
    }


    protected function formatResults(array $results): string
    {
        if (empty($results)) {
            return "‚ÑπÔ∏è No data found for your request.";
        }

        $html = "<div class='overflow-x-auto'><table class='table-auto w-full text-sm text-left text-gray-800 border border-gray-300 rounded'>";
        $html .= $this->generateTableHeader($results);
        $html .= $this->generateTableBody($results);
        $html .= "</table></div>";

        return $html;
    }

    protected function generateTableHeader(array $results): string
    {
        $html = "<thead><tr class='bg-gray-100 font-semibold'>";
        foreach ((array)$results[0] as $key => $val) {
            $html .= "<th class='px-4 py-2 border'>" . e(ucwords(str_replace('_', ' ', $key))) . "</th>";
        }
        $html .= "</tr></thead>";
        return $html;
    }

    protected function generateTableBody(array $results): string
    {
        $html = "<tbody>";
        foreach ($results as $row) {
            $html .= "<tr class='hover:bg-gray-50'>";
            foreach ((array)$row as $val) {
                $html .= "<td class='px-4 py-2 border'>" . e($val) . "</td>";
            }
            $html .= "</tr>";
        }
        $html .= "</tbody>";
        return $html;
    }
}
